{
  "version": "https://jsonfeed.org/version/1",
  "title": "Dev Digest",
  "home_page_url": "https://devdigest.net",
  "feed_url": "https://devdigest.net/feed/feed.json",
  "description": "Dev Digest blog",
  "author": {
    "name": "Author Name. Daniel H",
    "url": ""
  },
  "items": [{
      "id": "https://devdigest.net/posts/optional-chaining/",
      "url": "https://devdigest.net/posts/optional-chaining/",
      "title": "Optional Chaining",
      "content_html": "<p>-Enables to immediately return <code>undefined</code> in object chaining if a <code>null</code> or <code>undefined</code> is encountered. <code><code>?.</code> </code> is the symbol to achieve this.</p>\n<p>Example #1</p>\n <!-- excerpt -->\n<pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">const</span> customer <span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>        customerId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span><br>        firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><br>        lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>sni<br>        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> customerId<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> FirstName<span class=\"token operator\">:</span> <span class=\"token string\">'Daniel'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> customer<span class=\"token operator\">?.</span>firstName<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Now we can  do the optional chaining</span><br>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In the example above, <code>customer</code> is checked for <code>null</code> or <code>undefined</code>; and since it is not, <code>firstName</code> is checked for <code>null</code> or <code>undefined</code>, and since it is not, it will execute <code>toUpperCase()</code>. The console log in the above example will print out 'DANIEL'.</p>\n<p>Now let's see the following example<br>\nExample #2</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> lastName <span class=\"token operator\">=</span> customer<span class=\"token operator\">?.</span>lastName<span class=\"token operator\">?.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In this example, <code>customer</code> is checked for <code>null</code> or <code>undefined</code>. Since it is not, the execution of the chain will continue and check lastName for <code>null</code> or <code>undefined</code>. Here since lastName is not set, it is <code>undefined</code>, the optional chain will return immediately <code>undefined</code> without continuing the execution ( <code>toUpperCase()</code> will not be called) and the console output will be 'undefined'</p>\n<h3 id=\"now-let's-the-coolness-of-this-feature\">Now let's the coolness of this feature <a class=\"direct-link\" href=\"#now-let's-the-coolness-of-this-feature\">#</a></h3>\n<p>The following codes are the equivalent of Example #1<br>\nEquivalent Code #1</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    firstName <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Equivalent Code # 2</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span><br>  customer <span class=\"token operator\">&amp;&amp;</span> customer<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">&amp;&amp;</span> customer<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>How many places we use the <code>&amp;&amp;</code> to check <code>null</code> and <code>undefined</code>? so Generally speaking, we can replacing all such repetitive code with <code>&amp;&amp;</code>.</p>\n<h3 id=\"caution\"><span style=\"color:red\">CAUTION</span> <a class=\"direct-link\" href=\"#caution\">#</a></h3>\n<p>There is a difference between <code>&amp;&amp;</code> and <code>?.</code> and proceed with caution</p>\n<p><code>&amp;&amp;</code> evaluates falsy values such as <code>empty</code>, <code>0</code>, <code>false</code>, and <code>NaN</code>. However, if <code>?.</code> halts the chain and returns <code>undefined</code> if only encountered with <code>null</code> or <code>undefined</code>. It does not return or stop execution if encountered valid values such as <code>0</code> or <code>empty</code></p>\n<p>Example #3</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> fullName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span><br>  lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// using `?.`</span><br><span class=\"token keyword\">let</span> defaultLastName <span class=\"token operator\">=</span> fullName<span class=\"token operator\">?.</span>lastName<span class=\"token operator\">?.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Maru\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">LastName(?.): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>defaultLastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will print 'LastName: Maru'</span><br><br><span class=\"token comment\">//using &amp;&amp;</span><br>defaultLastName <span class=\"token operator\">=</span><br>  fullName <span class=\"token operator\">&amp;&amp;</span> fullName<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">&amp;&amp;</span> fullName<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bontu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string is immutable, so lastName is still empty</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">LastName(&amp;&amp;):</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>defaultLastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will print undefined</span></code></pre>\n<p>From the above example, it is clear that <code>&amp;&amp;</code> and <code>?.</code> act differently on 'empty' values. This is intentional and just you need to be careful when replacing <code>&amp;&amp;</code> with <code>?.</code></p>\n<p><code>?.</code> can also be used with array indexing, and function calls as well</p>\n<p>Example #4 - Array accessing</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> oddNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> firstValue <span class=\"token operator\">=</span> oddNumbers<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>On <code>oddNumbers?.[0]</code>, <code>?.</code> checks if the array is null or empty, otherwise access the first element.</p>\n<p>Example #5 - Function Calls</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><br>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span><br>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span><br>  op<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><br><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> op<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//checks if op is not null or undefined,</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sum will be 9</span><br><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>sum <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sum will be 'undefined'</span></code></pre>\n<p>In Example #5, <code>op?.(x,y)</code> checks if the function parameter <code>op</code> is null or undefined, if not, it will execute the method call otherwise returns <code>undefined</code></p>\n<h3 id=\"warning\"><span style=\"color:red\">WARNING</span> <a class=\"direct-link\" href=\"#warning\">#</a></h3>\n<p><code>?.</code> only acts on object chaining and does not act on the entire statement of an expression. it means after it shortcircuits on <code>null</code> or <code>undefined</code> , it won't stop what follows the chaining.</p>\n<p>Example #6</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> multiplied <span class=\"token operator\">=</span> coordinates<span class=\"token operator\">?.</span>z <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error</span></code></pre>\n<p>In Example #6, <code>?.</code> returns <code>undefined</code> on evaluating <code>coordinates?.z</code> but does not stop the rest of the statement, thus the above code will result in compile time error 'Object is possibly 'undefined', saved by the awesomeness of typescript.</p>\n<p>However, if you are concatening strings to create a message to a user, be careful since you might concatenate empty string with some other string and the result may not be as expected.</p>\n<h3 id=\"nullish-coalescing\">Nullish Coalescing <a class=\"direct-link\" href=\"#nullish-coalescing\">#</a></h3>\n<p><code>??</code> now has become to state a default fall back when <code>null</code> or <code>undefined</code> is encountered.</p>\n<p>Example #7</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><br><span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> greeting<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> defaultGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"What's up!\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>greeting <span class=\"token operator\">??</span> defaultGreeting<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Daniel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Daniel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Good morning!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In the code snippet above, the first console log results in 'Daniel, What's up!' and the second one results in 'Daniel, Good morning!'</p>\n<h3 id=\"caution-2\"><span style=\"color:red\">CAUTION</span> <a class=\"direct-link\" href=\"#caution-2\">#</a></h3>\n<p><code>??</code> can be used to replace <code>||</code>. However, <code>||</code> acts on falsy values such as empty (<code>&quot;&quot;</code>), <code>undefined</code>, <code>0</code>, <code>NaN</code>. <code>??</code> acts on <code>undefined</code> or <code>null</code>.</p>\n<p>Example #7</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> defaultSpeedBy <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> currentSpeed <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">let</span> speedBy<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> newSpeedCorrect <span class=\"token operator\">=</span> currentSpeed <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>speedBy <span class=\"token operator\">||</span> defaultSpeedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span><br><br><span class=\"token keyword\">const</span> newSpeedAlsoCorrect <span class=\"token operator\">=</span> currentSpeed <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>speedBy <span class=\"token operator\">??</span> defaultSpeedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//30</span><br><br><span class=\"token comment\">//now</span><br>speedBy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> newSpeedWrong <span class=\"token operator\">=</span> currentSpeed <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>speedBy <span class=\"token operator\">||</span> defaultSpeedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//30</span><br><span class=\"token keyword\">const</span> speedCorrect <span class=\"token operator\">=</span> currentSpeed <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>speedBy <span class=\"token operator\">??</span> defaultSpeedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span></code></pre>\n<p>In the example, when <code>speedBy</code> is <code>undefined</code> both <code>||</code> and <code>??</code> give correct results. However, when <code>speedBy</code> is set to 0, <code>||</code> 0 is falsy value and results in wrong result 30 (<code>newSpeedWrong</code>). To avoid such erros, you can use <code>??</code> (<code>speedCorrect</code>)</p>\n<p>Kudos to optional chaining and nullish coalescing.</p>\n",
      "date_published": "2021-01-03T00:00:00+00:00"
    },{
      "id": "https://devdigest.net/posts/fourthpost/",
      "url": "https://devdigest.net/posts/fourthpost/",
      "title": "This is my fourth post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p><img src=\"https://cdn.pixabay.com/photo/2020/08/25/11/11/zebra-5516455_1280.jpg\" alt=\"An image\"></p>\n<h2 id=\"section-header\">Section Header <a class=\"direct-link\" href=\"#section-header\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
      "date_published": "2018-09-30T00:00:00+00:00"
    },{
      "id": "https://devdigest.net/posts/thirdpost/",
      "url": "https://devdigest.net/posts/thirdpost/",
      "title": "This is my third post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"highlight-line\"><span class=\"token comment\">// this is a command</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">myCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><ins class=\"highlight-line highlight-line-add\">\t<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></ins><br><span class=\"highlight-line\"></span><br><del class=\"highlight-line highlight-line-remove\">\tcounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></del><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token comment\">// Test with a line break above this line.</span></span><br><span class=\"highlight-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<h2 id=\"section-header\">Section Header <a class=\"direct-link\" href=\"#section-header\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
      "date_published": "2018-08-24T00:00:00+00:00"
    },{
      "id": "https://devdigest.net/posts/secondpost/",
      "url": "https://devdigest.net/posts/secondpost/",
      "title": "This is my second post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<!-- excerpt -->\n<h3 id=\"section-header\">Section Header <a class=\"direct-link\" href=\"#section-header\">#</a></h3>\n<p><a href=\"/posts/firstpost/\">First post</a><br>\n<a href=\"/posts/thirdpost/\">Third post</a></p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n<h3 id=\"test-svg\">Test SVG <a class=\"direct-link\" href=\"#test-svg\">#</a></h3>\n<p><img src=\"/img/share.svg\" alt=\"Test Share SVG\"></p>\n<h3 id=\"test-relative-local-image\">Test Relative Local Image <a class=\"direct-link\" href=\"#test-relative-local-image\">#</a></h3>\n<img src=\"../../img/doener.jpg\" width=\"100%\" height=\"auto\">",
      "date_published": "2018-07-04T00:00:00+00:00"
    },{
      "id": "https://devdigest.net/posts/firstpost/",
      "url": "https://devdigest.net/posts/firstpost/",
      "title": "This is my first post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<!-- excerpt -->\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p><img src=\"https://cdn.pixabay.com/photo/2020/08/30/20/54/rice-field-5530707_1280.jpg\" alt=\"An image\"></p>\n<h2 id=\"section-header\">Section Header <a class=\"direct-link\" href=\"#section-header\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n<pre class=\"language-text\"><code class=\"language-text\"><span class=\"highlight-line\">// this is a command</span><br><span class=\"highlight-line\">function myCommand() {</span><br><mark class=\"highlight-line highlight-line-active\">\tlet counter = 0;</mark><br><mark class=\"highlight-line highlight-line-active\">\tcounter++;</mark><br><span class=\"highlight-line\">}</span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">// Test with a line break above this line.</span><br><span class=\"highlight-line\">console.log('Test');</span></code></pre>\n",
      "date_published": "2018-05-01T00:00:00+00:00"
    }
  ]
}
